Certainly, Vivek! Here’s a detailed, paragraph-style documentation covering every step of your project clearly and comprehensively:

---

# Detailed Project Documentation: Hosting a Secure Portfolio Website on AWS

## Step 1: Creating the S3 Bucket and Uploading Website Files

The first step involved creating an Amazon S3 bucket to serve as the storage for the portfolio website. The bucket was created in the US East (N. Virginia) region with a unique name, ensuring global uniqueness and easy identification. Once the bucket was ready, the portfolio website files, including the main HTML file (`index.html`), CSS, JavaScript, and profile images (such as `.png` files), were uploaded directly to the root of this bucket. To enable static website hosting, the S3 bucket’s static website hosting feature was enabled, specifying `index.html` as the default root object. This setup allowed the bucket to serve the portfolio files via a website endpoint URL, accessible over HTTP.

---

## Step 2: Configuring Public Access and Bucket Policies

Initially, to make the website publicly accessible, all public access blocking settings on the S3 bucket were disabled. This allowed anyone on the internet to retrieve the files. A bucket policy was added granting public read (`s3:GetObject`) permissions to all users. However, this open access posed significant security risks, as the bucket was vulnerable to unauthorized modifications or deletions. Recognizing this, the public access settings were revised to improve security. Block Public Access settings related to Access Control Lists (ACLs) were re-enabled to prevent public permissions granted via ACLs, while public access through bucket policies was selectively allowed. This ensured that only the bucket policy could grant public read access, thus reducing exposure. The bucket policy was carefully crafted to allow only read access to the objects, without any write or delete permissions.

---

## Step 3: Enhancing Security and Enabling HTTPS Using CloudFront

Since S3 static website endpoints only support HTTP, visitors encountered “Not Secure” warnings in browsers. To secure the portfolio with HTTPS and improve performance, Amazon CloudFront was introduced as a Content Delivery Network (CDN) in front of the S3 bucket. The CloudFront distribution was configured with the S3 bucket’s REST endpoint (e.g., `vivekstaticwebsite.s3.amazonaws.com`) as its origin instead of the website endpoint, allowing HTTPS connections. The Default Root Object was set to `index.html` to ensure the homepage loads correctly. Viewer protocol policy was set to redirect HTTP requests to HTTPS, enforcing secure connections.

To further secure the S3 bucket, an Origin Access Control (OAC) was created and associated with the CloudFront origin. This OAC acts as a virtual identity that CloudFront uses to access the bucket securely. The bucket policy was updated to grant read permissions exclusively to this OAC principal. Additionally, the bucket’s public access settings were tightened by blocking all public access except through CloudFront’s OAC, effectively preventing direct public access to the bucket.

---

## Step 4: Troubleshooting and Resolving Issues

Several challenges were encountered during implementation. Initially, attempts to access the website via the CloudFront URL resulted in “Access Denied” errors. This was due to insufficient permissions in the bucket policy for CloudFront’s OAC, which was corrected by explicitly granting the OAC the `s3:GetObject` permission on all bucket objects. Another issue was caused by not setting the Default Root Object in CloudFront, which led to errors when accessing the root URL. After setting this to `index.html`, the homepage loaded successfully. Furthermore, initial page loads showed `X-Cache: Miss from cloudfront`, indicating CloudFront had to fetch the content from the origin for the first time; subsequent requests showed cache hits, improving performance.

---

## Step 5: Final Deployment and Testing

After completing the setup, the portfolio website was fully accessible via the CloudFront distribution URL with HTTPS enabled, providing a secure browsing experience for visitors. The S3 bucket was effectively locked down to allow access only via CloudFront, eliminating direct public access and reducing security risks. CloudFront’s caching and global network improved load times and availability. Testing verified that the site loads correctly, assets like images and CSS are served efficiently, and HTTPS is enforced.

---

## Step 6: Cost Considerations and AWS Free Tier Benefits

Because the AWS account used for this project was newly created and is eligible for the AWS Free Tier, the portfolio website hosting incurs little to no cost during the first 12 months. The Free Tier provides up to 5 GB of S3 storage, 20,000 GET requests, and 15 GB data transfer out per month, which easily covers the portfolio’s small file size and typical traffic. CloudFront’s Free Tier offers 50 GB data transfer and 2 million HTTP/HTTPS requests per month. After the free tier period, costs remain very low, estimated at approximately \$1–\$2 per month for moderate traffic levels. Recommendations include monitoring usage with AWS Budgets and optimizing assets to reduce bandwidth consumption.

---

## Conclusion

This project successfully demonstrated the best practices for securely hosting a static portfolio website on AWS. It balanced public accessibility with strong security measures by using S3 bucket policies, Block Public Access settings, and CloudFront Origin Access Control. The integration with CloudFront ensured HTTPS delivery and performance benefits. Additionally, leveraging AWS Free Tier made the project cost-effective and scalable for personal or professional use.

---

If you want, I can help tailor or expand this documentation further or assist in adding screenshots and diagrams for visual aid. Just let me know!
